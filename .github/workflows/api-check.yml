name: API Change Detection

on:
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  api-check:
    runs-on: macos-latest
    steps:
      # Checkout the PR branch
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for main branch comparison

      # Set up Swift
      - name: Set up Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: '6.0'

      # Build and dump symbol graphs for PR branch
      - name: Generate symbol graphs for PR branch
        run: |
          set -e
          swift build || { echo "::error ::Swift build failed for PR branch"; exit 1; }
          mkdir -p ${{ github.workspace }}/symbol-graphs/pr
          swift package dump-symbol-graph --skip-synthesized-members \
            || { echo "::error ::Failed to dump symbol graph for PR branch. Ensure no test targets are included."; exit 1; }
          # Find the symbol graph output directory
          symbolgraph_dir=$(find .build -type d -name symbolgraph -print -quit)
          if [ -z "$symbolgraph_dir" ]; then
            echo "::error ::Symbol graph output directory not found in .build"
            exit 1
          fi
          # Move generated symbol graph files to symbol-graphs/pr
          for module in Congregation SalesforceClient CongregationKit; do
            src_file="${symbolgraph_dir}/${module}.symbols.json"
            dst_file="${{ github.workspace }}/symbol-graphs/pr/${module}.symbols.json"
            if [ -f "$src_file" ]; then
              mv "$src_file" "$dst_file"
            else
              echo "::error ::Symbol graph file for $module not found in $symbolgraph_dir"
              exit 1
            fi
          done

      # Checkout main branch and generate symbol graphs
      - name: Generate symbol graphs for main branch
        run: |
          set -e
          git checkout origin/main
          swift build || { echo "::error ::Swift build failed for main branch"; exit 1; }
          mkdir -p ${{ github.workspace }}/symbol-graphs/main
          swift package dump-symbol-graph --skip-synthesized-members \
            || { echo "::error ::Failed to dump symbol graph for main branch. Ensure no test targets are included."; exit 1; }
          # Find the symbol graph output directory
          symbolgraph_dir=$(find .build -type d -name symbolgraph -print -quit)
          if [ -z "$symbolgraph_dir" ]; then
            echo "::error ::Symbol graph output directory not found in .build"
            exit 1
          fi
          # Move generated symbol graph files to symbol-graphs/main
          for module in Congregation SalesforceClient CongregationKit; do
            src_file="${symbolgraph_dir}/${module}.symbols.json"
            dst_file="${{ github.workflow }}/symbol-graphs/main/${module}.symbols.json"
            if [ -f "$src_file" ]; then
              mv "$src_file" "$dst_file"
            else
              echo "::error ::Symbol graph file for $module not found in $symbolgraph_dir"
              exit 1
            fi
          done

      # Compare symbol graphs and generate table
      - name: Compare symbol graphs and generate table
        id: compare
        run: |
          set -e
          echo "api_diffs=" > ${{ github.workspace }}/diff_output.txt
          has_diff=false
          diff_content=""
          for module in Congregation SalesforceClient CongregationKit; do
            main_json="${{ github.workspace }}/symbol-graphs/main/${module}.symbols.json"
            pr_json="${{ github.workspace }}/symbol-graphs/pr/${module}.symbols.json"
            diff_file="${{ github.workspace }}/symbol-graphs/diff_${module}.txt"
            # Generate raw diff for debugging
            diff "$main_json" "$pr_json" > "$diff_file" 2>/dev/null || true
            # Extract symbols for comparison
            main_symbols=$(jq -c '.symbols[] | {kind: .kind.identifier, identifier: .identifier.precise, type: .declarations.declarationFragments[0].spelling?}' "$main_json")
            pr_symbols=$(jq -c '.symbols[] | {kind: .kind.identifier, identifier: .identifier.precise, type: .declarations.declarationFragments[0].spelling?}' "$pr_json")
            # Initialize module-specific table
            module_summary=""
            module_summary+="\n### $module API Changes\n"
            module_summary+="| Change Type | Symbol Kind | Identifier | Details |\n"
            module_summary+="|-------------|-------------|------------|---------|\n"
            # Check for added symbols
            while IFS= read -r pr_symbol; do
              pr_id=$(echo "$pr_symbol" | jq -r '.identifier')
              pr_kind=$(echo "$pr_symbol" | jq -r '.kind')
              pr_type=$(echo "$pr_symbol" | jq -r '.type // "unknown"')
              if ! echo "$main_symbols" | grep -q "$pr_id"; then
                module_summary+="| Added | $pr_kind | \`$pr_id\` | Type: $pr_type |\n"
                has_diff=true
              fi
            done <<< "$pr_symbols"
            # Check for removed symbols
            while IFS= read -r main_symbol; do
              main_id=$(echo "$main_symbol" | jq -r '.identifier')
              main_kind=$(echo "$main_symbol" | jq -r '.kind')
              main_type=$(echo "$main_symbol" | jq -r '.type // "unknown"')
              if ! echo "$pr_symbols" | grep -q "$main_id"; then
                module_summary+="| Removed | $main_kind | \`$main_id\` | Type: $main_type |\n"
                has_diff=true
              fi
            done <<< "$main_symbols"
            # Check for modified symbols (type changes)
            while IFS= read -r pr_symbol; do
              pr_id=$(echo "$pr_symbol" | jq -r '.identifier')
              pr_kind=$(echo "$pr_symbol" | jq -r '.kind')
              pr_type=$(echo "$pr_symbol" | jq -r '.type // "unknown"')
              main_symbol=$(echo "$main_symbols" | grep "$pr_id" || true)
              if [ -n "$main_symbol" ]; then
                main_type=$(echo "$main_symbol" | jq -r '.type // "unknown"')
                if [ "$pr_type" != "$main_type" ]; then
                  module_summary+="| Modified | $pr_kind | \`$pr_id\` | Type changed from $main_type to $pr_type |\n"
                  has_diff=true
                fi
              fi
            done <<< "$pr_symbols"
            # Append to diff content if changes exist
            if [[ "$module_summary" != *"Change Type | Symbol Kind | Identifier Graph"* ]]; then
              diff_content+="$module_summary\n"
            fi
          done
          # Add note if no changes detected
          if [ "$has_diff" = "false" ]; then
            diff_content+="\nNo public API changes detected.\n"
          fi
          echo "has_diff=$has_diff" >> $GITHUB_OUTPUT
          echo "diff_content<<EOF" >> ${{ github.workspace }}/diff_output.txt
          echo "$diff_content" >> ${{ github.workspace }}/diff_output.txt
          echo "EOF" >> ${{ github.workspace }}/diff_output.txt

      # Archive raw diffs as artifacts for debugging
      - name: Archive raw JSON diffs
        if: steps.compare.outputs.has_diff == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: raw-api-diffs
          path: ${{ github.workspace }}/symbol-graphs/diff_*.txt
          retention-days: 7

      # Post PR comment with table
      - name: Comment on PR with API changes
        if: always()
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ðŸ›‘ Public API Change Detection Results
            
            $(cat ${{ github.workspace }}/diff_output.txt | grep -A 1000 'diff_content' | sed '1d; /^EOF$/d')
            
            Raw JSON diffs are available as artifacts for detailed inspection (if changes were detected).
            Please review any API changes to ensure they are intentional. Public API changes may require versioning or additional documentation.

      # Fail the build if API changes are detected
      - name: Fail if API changes detected
        if: steps.compare.outputs.has_diff == 'true'
        run: |
          echo "::error ::Public API changes detected. See PR comment for details."
          exit 1

      # Clean up temporary files
      - name: Clean up
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/symbol-graphs
          rm -rf .build/*/symbolgraph
          rm -f ${{ github.workspace }}/diff_output.txt